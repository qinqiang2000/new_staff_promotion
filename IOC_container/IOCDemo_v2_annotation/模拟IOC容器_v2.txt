1. 学习注解基本概念、使用方法及其原理。

2. 学习spring中@Component @ComponentScan @Bean @Lazy @Scope @Configuration 注解。
3. 完成com.cmsz.upay.ioc.annotationScan.test.TestSuit和com.cmsz.upay.ioc.annotation.test.TestSuit。

注解的定义位于com.cmsz.upay.ioc.context.annotation包中

需要实现的内容：
1.com.cmsz.upay.ioc.annotationScan.test.TestSuit
com.cmsz.upay.ioc.annotationScan.test.config中有@ComponentScan注解，根据@ComponentScan的value值，即需要查找的包，在AnnotationConfigApplicationContext中编写处理代码，查找该路径下所有包含@Component的类，为这些类创建实例

2.com.cmsz.upay.ioc.annotation.test.TestSuit
新定义一个@Configuration注解，为com.cmsz.upay.ioc.annotation.test.config添加@Configuration，使得config成为配置类，在AnnotationConfigApplicationContext中编写处理代码，利用反射处理类中包含@Bean @Lazy @Scope注解的方法

-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
@Component
public class Apple {}  
相当于xml配置中的
<bean id="apple" class="com.cmsz.upay.ioc.component.Apple "></bean>
------------------------------------------------------------------------------------------
@Bean
@Lazy 
@Scope("prototype")
public Cupcake cupCake() {
    Cupcake cupcake = new Cupcake();
    cupcake.setName("CupCake");
    cupcake.setPrice(10);
    return cupcake;
}
相当于xml配置中的
<bean id="cupCake" class="com.cmsz.upay.ioc.vo.Cupcake" scope="prototype"  lazy-init="true">
   <property name="name">CupCake</property>
   <property name="price" value="10"/>
</bean>
-----------------------------------------------------------------------------------------------
需要做的是把  读取xml文件的配置进行处理   改变为   使用反射读取java类和方法的注解进行处理
	